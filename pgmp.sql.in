/* pgmp -- Module installation SQL script
 *
 * Copyright (C) 2011 Daniele Varrazzo
 *
 * This file is part of the PostgreSQL GMP Module
 *
 * The PostgreSQL GMP Module is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 *
 * The PostgreSQL GMP Module is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the PostgreSQL GMP Module.  If not, see
 * http://www.gnu.org/licenses/.
 */


-- Adjust this setting to control where the objects get created.
SET search_path = public;


--
-- mpz user-defined type
--

CREATE OR REPLACE FUNCTION pmpz_in(cstring)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION pmpz_out(mpz)
RETURNS cstring
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE mpz (
      INPUT = pmpz_in
    , OUTPUT = pmpz_out
    , INTERNALLENGTH = VARIABLE
    , STORAGE = EXTENDED
    , CATEGORY = 'N'
);


--
-- mpz cast
--

CREATE OR REPLACE FUNCTION pmpz_from_smallint(smallint)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (smallint AS mpz)
WITH FUNCTION pmpz_from_smallint(smallint)
AS IMPLICIT;


CREATE OR REPLACE FUNCTION pmpz_from_integer(integer)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (integer AS mpz)
WITH FUNCTION pmpz_from_integer(integer)
AS IMPLICIT;


CREATE OR REPLACE FUNCTION pmpz_from_bigint(bigint)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (bigint AS mpz)
WITH FUNCTION pmpz_from_bigint(bigint)
AS IMPLICIT;


-- TODO: stub - only good for ints
CREATE CAST (numeric AS mpz)
WITH INOUT
AS IMPLICIT;


--
-- mpz operators
--

CREATE OR REPLACE FUNCTION pmpz_uminus(mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR - (
	RIGHTARG = mpz,
	PROCEDURE = pmpz_uminus
);


CREATE OR REPLACE FUNCTION pmpz_uplus(mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR + (
	RIGHTARG = mpz,
	PROCEDURE = pmpz_uplus
);


CREATE OR REPLACE FUNCTION pmpz_add(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR + (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	COMMUTATOR = +,
	PROCEDURE = pmpz_add
);


CREATE OR REPLACE FUNCTION pmpz_sub(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR - (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = pmpz_sub
);


CREATE OR REPLACE FUNCTION pmpz_mul(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR * (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	COMMUTATOR = *,
	PROCEDURE = pmpz_mul
);


CREATE OR REPLACE FUNCTION pmpz_tdiv_q(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR / (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = pmpz_tdiv_q
);


CREATE OR REPLACE FUNCTION pmpz_tdiv_r(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR % (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = pmpz_tdiv_r
);


CREATE OR REPLACE FUNCTION pmpz_cdiv_q(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR +/ (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = pmpz_cdiv_q
);


CREATE OR REPLACE FUNCTION pmpz_cdiv_r(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR +% (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = pmpz_cdiv_r
);


CREATE OR REPLACE FUNCTION pmpz_fdiv_q(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR -/ (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = pmpz_fdiv_q
);


CREATE OR REPLACE FUNCTION pmpz_fdiv_r(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR -% (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = pmpz_fdiv_r
);


--
-- mpz comparisons
--

CREATE OR REPLACE FUNCTION pmpz_eq(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR = (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = pmpz_eq
    , COMMUTATOR = =
    , NEGATOR = <>
    , RESTRICT = eqsel
);

CREATE OR REPLACE FUNCTION pmpz_ne(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR <> (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = pmpz_ne
    , COMMUTATOR = <>
    , NEGATOR = =
    , RESTRICT = neqsel
);

CREATE OR REPLACE FUNCTION pmpz_gt(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR > (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = pmpz_gt
    , COMMUTATOR = <
    , NEGATOR = <=
    , RESTRICT = scalargtsel
);

CREATE OR REPLACE FUNCTION pmpz_ge(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR >= (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = pmpz_ge
    , COMMUTATOR = <=
    , NEGATOR = <
    , RESTRICT = scalargtsel
);

CREATE OR REPLACE FUNCTION pmpz_lt(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR < (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = pmpz_lt
    , COMMUTATOR = >
    , NEGATOR = >=
    , RESTRICT = scalarltsel
);

CREATE OR REPLACE FUNCTION pmpz_le(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR <= (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = pmpz_le
    , COMMUTATOR = >=
    , NEGATOR = >
    , RESTRICT = scalarltsel
);


--
-- mpz indexes
--

CREATE OR REPLACE FUNCTION mpz_cmp(mpz, mpz)
RETURNS integer
AS 'MODULE_PATHNAME', 'pmpz_cmp'
LANGUAGE C STRICT IMMUTABLE;




--
-- Aggregation functions
--

CREATE OR REPLACE FUNCTION pmpza_in(cstring)
RETURNS _mpza
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION pmpza_out(_mpza)
RETURNS cstring
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

-- TODO: this type should be marked as "non-storable"
CREATE TYPE _mpza (
      INPUT = pmpza_in
    , OUTPUT = pmpza_out
    -- 12 is ok on 32 bit, but probably uninfluent anyway
    -- as we never store this type
    , INTERNALLENGTH = 16
);


CREATE OR REPLACE FUNCTION _pmpz_from_pmpza(_mpza)
RETURNS mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OR REPLACE FUNCTION _pmpz_agg_add(_mpza, mpz)
RETURNS _mpza
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE AGGREGATE sum (mpz)
(
      SFUNC = _pmpz_agg_add
    , STYPE = _mpza
    , FINALFUNC = _pmpz_from_pmpza
    , INITCOND = ''
);

CREATE OR REPLACE FUNCTION _pmpz_agg_mul(_mpza, mpz)
RETURNS _mpza
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE AGGREGATE prod (mpz)
(
      SFUNC = _pmpz_agg_mul
    , STYPE = _mpza
    , FINALFUNC = _pmpz_from_pmpza
    , INITCOND = ''
);


--
-- Test functions
--

CREATE OR REPLACE FUNCTION mpz_test_dataset(int4, int4)
RETURNS SETOF mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OR REPLACE FUNCTION numeric_test_dataset(int4, numeric)
RETURNS SETOF numeric
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;




--
-- mpq user-defined type
--

CREATE OR REPLACE FUNCTION pmpq_in(cstring)
RETURNS mpq
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION pmpq_out(mpq)
RETURNS cstring
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE mpq (
      INPUT = pmpq_in
    , OUTPUT = pmpq_out
    , INTERNALLENGTH = VARIABLE
    , STORAGE = EXTENDED
    , CATEGORY = 'N'
);



